dialect "mvel"

import org.lskk.lumen.reasoner.*
import org.lskk.lumen.reasoner.event.*
import org.lskk.lumen.reasoner.expression.*
import org.lskk.lumen.reasoner.goal.*
import org.lskk.lumen.reasoner.story.*

global org.slf4j.Logger log
global StoryRepository storyRepo

declare TellStory
    @role( event )
end

declare PropositionTold
    @role( event )
end

rule "get random story"
when
    $goal : TellStory(story == null, $id : id)
then
    log.info("Setting story for goal {}", $goal);
    modify($goal) {
        setStoryId("soon_see"),
        setStory(storyRepo.findOne("soon_see"))
    }
end

rule "tell initial proposition"
when
    $tellStory : TellStory(story != null)
    not( PropositionTold(tellStory == $tellStory) )
then
    log.info("Telling initial proposition for {}", $tellStory);
    PropositionTold $propositionTold = new PropositionTold($tellStory, 0);
    insert($propositionTold);
    boolean done = $propositionTold.index >= $tellStory.story.propositions.size - 1;
    if (done) {
        log.info("Done telling {} propositions for {}", $tellStory.story.propositions.size, $tellStory);
    }
    modify($tellStory) {
        setLastPropositionIndex($propositionTold.index),
        setDone(done)
    }
end

rule "tell next proposition until done"
when
    $lastProposition : PropositionTold($tellStory : tellStory, $lastIndex : index,
        tellStory.done == false)
    not( PropositionTold(tellStory == $tellStory, index == $lastIndex + 1, this after[0s,10s] $lastProposition) )
then
    log.debug("Telling proposition {} for {}", $lastIndex + 1, $tellStory);
    PropositionTold $propositionTold = new PropositionTold($tellStory, $lastIndex + 1);
    insert($propositionTold);
    boolean done = $propositionTold.index >= $tellStory.story.propositions.size - 1;
    if (done) {
        log.info("Done telling {} propositions for {}", $tellStory.story.propositions.size, $tellStory);
    }
    modify($tellStory) {
        setLastPropositionIndex($propositionTold.index),
        setDone(done)
    }
end

rule "communicate proposition"
when
    $proposition : PropositionTold($tellStory : tellStory, $index : index)
then
    log.debug("Expressing proposition {} for {}", $index, $tellStory);
    $tellStory.channel.express($tellStory.avatarId, $tellStory.story.propositions[$index], null);
end
